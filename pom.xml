<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- Segundo documentação do spring-boot-maven-plugin, a herança de spring-boot-starter-parent oferece entre outras vantagens, 
		o gerenciamento de versões de dependências permitindo a omissão da tag <version> para as dependências do projeto neste 
		pom.xml. Isso faz com que eu não precise adicionar versão para novas dependências. Caso haja necessidade de especificar 
		a versão deu uma dependência, isso ainda pode ser feito na tag <properties> usando uma sintaxe específica. Ainda é possível
		configurar o gerenciamento de dependência através da tag <dependencyManagement>, configurando a dependência 
		pring-boot-dependencies apenas. Isso se faz necessário quando o projeto não herda de spring-boot-starter-parent.  -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.martinsvargas</groupId>
	<artifactId>bookstore</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>bookstore</name>
	<description>Spring Boot and Angular 10</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>

		<!-- O spring-boot-starter-data-jpa é instalado por padrão junto com o Spring Boot. Creio que isso se deva 
			a utilização do "spring-boot-starter-parent".  
			O Spring Data JPA é um projeto dentro de um outro maior que é o Spring Data. Dizemos que o Spring Data 
			possui vários projetos, dentre eles o Spring Data JPA, Spring Data Commons, Spring Data Key Value, 
			Spring Data Ldap, etc. Ele também é chamado de framework. A missão dele é evitar que tenhamos que criar 
			os DAO's que fazem a interface com o banco de dados através de SQL. Antigamente uma Model precisava 
			necessariamente do respectivo DAO. Implementando o Spring Data JPA ele deixa prontas muitas instruções 
			comuns como busca por id, insert, update, delete, paginação e etc. Em outras palavras, ele tem todos os 
			métodos necessários para um CRUD.-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- É o plugin abaixo que permite eu declarar "mvn spring-boot:run" por exemplo. Ele complementa
				os comandos do maven incrementando as opções, provavelmente através da implementação do 
				Command Pattern -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
